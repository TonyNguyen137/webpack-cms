/* 
This file contains SCSS code sourced from the Bootstrap framework.
Source: https://github.com/twbs/bootstrap/blob/main/scss/_utilities.scss
The code used in accordance with Bootstrap's open-source license (MIT).
Modifications may have been made to the original code.
*/

@use 'functions' as *;
@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'variables' as *;

$utilities: ();

$utilities: map.merge(
  (
    'inset': (
      property: inset,
      class: inset,
      values: 0,
    ),
    'isolation': (
      property: isolation,
      class: isolation,
      values: isolate,
    ),
    'cursor': (
      property: cursor,
      class: cursor,
      values: pointer help wait crosshair not-allowed zoom-in grab,
    ),
    'overlay': (
      property: border-image,
      class: overlay,
      values: (
        dark: fill 0 linear-gradient(#0003, #000),
      ),
    ),
    'resize': (
      property: resize,
      class: resize,
      values: none horizontal vertical both,
    ),

    'list-none': (
      property: list-style,
      class: list,
      values: none,
    ),
    'align': (
      property: vertical-align,
      class: align,
      values: baseline top middle bottom text-bottom text-top,
    ),

    'float': (
      responsive: true,
      property: float,
      values: (
        start: left,
        end: right,
        none: none,
      ),
    ),

    'object-fit': (
      responsive: true,
      property: object-fit,
      values: (
        contain: contain,
        cover: cover,
        fill: fill,
        scale: scale-down,
        none: none,
      ),
    ),

    'opacity': (
      property: opacity,
      values: $decimal-percentage-values,
    ),

    'overflow': (
      property: overflow,
      values: auto hidden visible scroll clip,
    ),
    'overflow-x': (
      property: overflow-x,
      values: auto hidden visible scroll clip,
    ),
    'overflow-y': (
      property: overflow-y,
      values: auto hidden visible scroll clip,
    ),

    'display': (
      responsive: true,
      print: true,
      property: display,
      class: d,
      values: inline inline-block block grid inline-grid table table-row table-cell flex inline-flex none,
    ),

    'focus-ring-colors': (
      css-var: true,
      css-variable-name: focus-ring-color,
      class: focus-ring-clr,
      values: map-loop($selected-theme-rgb-colors, rgba-css-var-advanced, '$key', 'focus-ring', $color-prefix),
    ),
    // 'focus-ring-opacity': (
    //   css-var: true,
    //   css-variable-name: focus-ring-opacity,
    //   class: focus-ring-opacity,
    //   values: $decimal-percentage-values,
    // ),
    // 'focus-ring-width': (
    //   css-var: true,
    //   css-variable-name: focus-ring-width,
    //   class: focus-ring-width,
    //   values: (
    //     1: 0.125rem,
    //     2: 0.25rem,
    //     3: 0.5rem,
    //   ),
    // ),
    'position':
      (
        property: position,
        values: static relative absolute fixed sticky,
      ),
    'top': (
      property: top,
      values: $percentage-values,
    ),
    'top-right': (
      property: top right,
      class: top-right,
      values: 0,
    ),
    'top-left': (
      property: top left,
      class: top-left,
      values: 0,
    ),
    'bottom': (
      property: bottom,
      values: $percentage-values,
    ),
    'bottom-right': (
      property: bottom right,
      class: bottom-right,
      values: 0,
    ),
    'bottom-left': (
      property: bottom left,
      class: bottom-left,
      values: 0,
    ),

    'start': (
      property: left,
      class: start,
      values: $percentage-values,
    ),
    'end': (
      property: right,
      class: end,
      values: $percentage-values,
    ),
    'translate-quarter': (
      property: transform,
      class: translate-quarter,
      values: (
        n: translate(-25%, -25%),
        null: translate(25%, 25%),
        nx: translateX(-25%),
        ny: translateY(-25%),
        x: translateX(25%),
        y: translateY(25%),
      ),
    ),
    'translate-middle': (
      property: transform,
      class: translate-middle,
      values: (
        null: translate(50%, 50%),
        n: translate(-50%, -50%),
        nx: translateX(-50%),
        ny: translateY(-50%),
        x: translateX(50%),
        y: translateY(50%),
      ),
    ),

    'translate-three-quarters': (
      property: transform,
      class: translate-three-quarters,
      values: (
        null: translate(75%, 75%),
        n: translate(-75%, -75%),
        nx: translateX(-75%),
        ny: translateY(-75%),
        x: translateX(75%),
        y: translateY(75%),
      ),
    ),

    'translate-full': (
      property: transform,
      class: translate-full,
      values: (
        null: translate(100%, 100%),
        n: translate(-100%, -100%),
        nx: translateX(-100%),
        ny: translateY(-100%),
        x: translateX(100%),
        y: translateY(100%),
      ),
    ),
    'border-colors': (
      css-var: true,
      css-variable-name: border-color,
      class: border-clr,
      values: map-loop($selected-theme-rgb-colors, rgba-css-var-advanced, '$key', null, $color-prefix),
    ),

    'border-width': (
      class: border-width,
      css-var: true,
      css-variable-name: map.get($border-widths, custom-property-name),
      values: map.get($border-widths, values),
    ),
    'border-styles': (
      class: border-style,
      css-var: true,
      css-variable-name: map.get($border-styles, custom-property-name),
      values: map.get($border-styles, values),
    ),

    'border-opacity': (
      css-var: true,
      class: border-opacity,
      values: (
        10: 0.1,
        25: 0.25,
        50: 0.5,
        75: 0.75,
        100: 1,
      ),
    ),
    'alpha': (
      class: alpha,
      css-var: true,
      css-variable-name: alpha,
      values: $decimal-percentage-values,
    ),
    'fixed-width': (
      property: width,
      class: w-f,
      values: $fixed-values,
    ),

    'width': (
      property: width,
      class: w,
      values:
        map.merge(
          $percentage-values,
          (
            auto: auto,
          )
        ),
    ),
    'max-width': (
      property: max-width,
      class: mw,
      values: $percentage-values,
    ),
    'viewport-width': (
      property: width,
      class: vw,
      values: $viewport-width-values,
    ),
    'min-viewport-width': (
      property: min-width,
      class: min-vw,
      values: $viewport-width-values,
    ),
    'fixed-height': (
      property: height,
      class: h-f,
      values: $fixed-values,
    ),
    'height': (
      property: height,
      class: h,
      values:
        map.merge(
          $percentage-values,
          (
            auto: auto,
          )
        ),
    ),
    'max-height': (
      property: max-height,
      class: mh,
      values: $percentage-values,
    ),
    'viewport-height': (
      property: height,
      class: vh,
      values: $viewport-height-values,
    ),
    'min-viewport-height': (
      property: min-height,
      class: min-vh,
      values: $viewport-height-values,
    ),

    'flex': (
      responsive: true,
      property: flex,
      values: (
        fill: 1 1 auto,
      ),
    ),
    'flex-direction': (
      responsive: true,
      property: flex-direction,
      class: flex,
      values: row column row-reverse column-reverse,
    ),
    'flex-grow': (
      responsive: true,
      property: flex-grow,
      class: flex,
      values: (
        grow-0: 0,
        grow-1: 1,
        grow-1-5: 1.5,
        grow-2: 2,
      ),
    ),
    'flex-shrink': (
      responsive: true,
      property: flex-shrink,
      class: flex,
      values: (
        shrink-0: 0,
        shrink-1: 1,
        shrink-1-5: 1.5,
        shrink-2: 2,
      ),
    ),
    'flex-wrap': (
      responsive: true,
      property: flex-wrap,
      class: flex,
      values: wrap nowrap wrap-reverse,
    ),
    'justify-content': (
      responsive: true,
      property: justify-content,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        evenly: space-evenly,
      ),
    ),
    'align-items': (
      responsive: true,
      property: align-items,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch,
      ),
    ),
    'align-content': (
      responsive: true,
      property: align-content,
      values: (
        start: flex-start,
        end: flex-end,
        center: center,
        between: space-between,
        around: space-around,
        stretch: stretch,
      ),
    ),
    'align-self': (
      responsive: true,
      property: align-self,
      values: (
        auto: auto,
        start: flex-start,
        end: flex-end,
        center: center,
        baseline: baseline,
        stretch: stretch,
      ),
    ),
    'order': (
      responsive: true,
      property: order,
      values: (
        first: -1,
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        last: 6,
      ),
    ),
    'margin': (
      responsive: true,
      property: margin,
      class: m,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-x': (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-y': (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-top': (
      responsive: true,
      property: margin-top,
      class: mt,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-end': (
      responsive: true,
      property: margin-right,
      class: me,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-bottom': (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'margin-start': (
      responsive: true,
      property: margin-left,
      class: ms,
      values:
        map.merge(
          map.merge($sizes-regular, $sizes-irregular),
          (
            auto: auto,
          )
        ),
    ),
    'negative-margin': (
      responsive: true,
      property: margin,
      class: m,
      values: $negative-spacers,
    ),
    'negative-margin-x': (
      responsive: true,
      property: margin-right margin-left,
      class: mx,
      values: $negative-spacers,
    ),
    'negative-margin-y': (
      responsive: true,
      property: margin-top margin-bottom,
      class: my,
      values: $negative-spacers,
    ),
    'negative-margin-top': (
      responsive: true,
      property: margin-top,
      class: mt,
      values: $negative-spacers,
    ),
    'negative-margin-end': (
      responsive: true,
      property: margin-right,
      class: me,
      values: $negative-spacers,
    ),
    'negative-margin-bottom': (
      responsive: true,
      property: margin-bottom,
      class: mb,
      values: $negative-spacers,
    ),
    'negative-margin-start': (
      responsive: true,
      property: margin-left,
      class: ms,
      values: $negative-spacers,
    ),
    'padding': (
      responsive: true,
      property: padding,
      class: p,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-x': (
      responsive: true,
      property: padding-right padding-left,
      class: px,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-y': (
      responsive: true,
      property: padding-top padding-bottom,
      class: py,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-top': (
      responsive: true,
      property: padding-top,
      class: pt,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-end': (
      responsive: true,
      property: padding-right,
      class: pe,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-bottom': (
      responsive: true,
      property: padding-bottom,
      class: pb,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'padding-start': (
      responsive: true,
      property: padding-left,
      class: ps,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'gap': (
      responsive: true,
      property: gap,
      class: gap,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'row-gap': (
      responsive: true,
      property: row-gap,
      class: row-gap,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),
    'column-gap': (
      responsive: true,
      property: column-gap,
      class: column-gap,
      values: map.merge($sizes-regular, $sizes-irregular),
    ),

    'font-size': (
      rfs: true,
      property: font-size,
      class: fs,
      values: map.merge($sizes-regular, ($sizes-irregular)),
    ),
    'font-style': (
      property: font-style,
      class: fst,
      values: italic normal,
    ),
    'font-weight': (
      property: font-weight,
      class: fw,
      values: if(meta.variable-exists(font-weights), $font-weights, null),
    ),
    'line-height': (
      property: line-height,
      class: lh,
      values: if(meta.variable-exists(line-heights), $line-heights, null),
    ),
    'text-align': (
      responsive: true,
      property: text-align,
      class: text,
      values: (
        start: left,
        end: right,
        center: center,
      ),
    ),
    'text-decoration': (
      property: text-decoration,
      values: none underline line-through,
    ),
    'text-transform': (
      property: text-transform,
      class: text,
      values: lowercase uppercase capitalize,
    ),
    'white-space': (
      property: white-space,
      class: text,
      values: (
        wrap: normal,
        nowrap: nowrap,
      ),
    ),
    'word-wrap': (
      property: word-wrap word-break,
      class: text,
      values: (
        break: break-word,
      ),
      rtl: false,
    ),

    // 'color': (
    //   property: color,
    //   class: text,
    //   local-vars: (
    //     'text-opacity': 1,
    //   ),
    //   values:
    //     map.merge(
    //       $utilities-text-colors,
    //       (
    //         'muted': var(--#{$prefix}secondary-color),
    //         // deprecated
    //         'black-50': rgba($black, 0.5),
    //         // deprecated
    //         'white-50': rgba($white, 0.5),
    //         // deprecated
    //         'body-secondary': var(--#{$prefix}secondary-color),
    //         'body-tertiary': var(--#{$prefix}tertiary-color),
    //         'body-emphasis': var(--#{$prefix}emphasis-color),
    //         'reset': inherit,
    //       )
    //     ),
    // ),
    // 'text-opacity': (
    //   css-var: true,
    //   class: text-opacity,
    //   values: (
    //     25: 0.25,
    //     50: 0.5,
    //     75: 0.75,
    //     100: 1,
    //   ),
    // ),
    // 'text-color': (
    //   property: color,
    //   class: text,
    //   values: $utilities-text-emphasis-colors,
    // ),
    // 'link-opacity':
    //   (
    //     css-var: true,
    //     class: link-opacity,
    //     state: hover,
    //     values: (
    //       10: 0.1,
    //       25: 0.25,
    //       50: 0.5,
    //       75: 0.75,
    //       100: 1,
    //     ),
    //   ),
    // 'link-offset': (
    //   property: text-underline-offset,
    //   class: link-offset,
    //   state: hover,
    //   values: (
    //     1: 0.125em,
    //     2: 0.25em,
    //     3: 0.375em,
    //   ),
    // ),
    'underline':
      (
        property: text-decoration,
        class: text,
        values: underline none,
      ),
    // 'link-underline': (
    //   property: text-decoration-color,
    //   class: link-underline,
    //   local-vars: (
    //     'link-underline-opacity': 1,
    //   ),
    //   values:
    //     map.merge(
    //       $utilities-links-underline,
    //       (
    //         null:
    //           rgba(
    //             var(--#{$prefix}link-color-rgb),
    //             var(--#{$prefix}link-underline-opacity, 1)
    //           ),
    //       )
    //     ),
    // ),
    // 'link-underline-opacity': (
    //   css-var: true,
    //   class: link-underline-opacity,
    //   state: hover,
    //   values: (
    //     0: 0,
    //     10: 0.1,
    //     25: 0.25,
    //     50: 0.5,
    //     75: 0.75,
    //     100: 1,
    //   ),
    // ),
    // 'background-color': (
    //   property: background-color,
    //   class: bg,
    //   local-vars: (
    //     'bg-opacity': 1,
    //   ),
    //   values:
    //     map.merge(
    //       $utilities-bg-colors,
    //       (
    //         'transparent': transparent,
    //         'body-secondary':
    //           rgba(
    //             var(--#{$prefix}secondary-bg-rgb),
    //             var(--#{$prefix}bg-opacity)
    //           ),
    //         'body-tertiary':
    //           rgba(
    //             var(--#{$prefix}tertiary-bg-rgb),
    //             var(--#{$prefix}bg-opacity)
    //           ),
    //       )
    //     ),
    // ),
    // 'bg-opacity': (
    //   css-var: true,
    //   class: bg-opacity,
    //   values: (
    //     10: 0.1,
    //     25: 0.25,
    //     50: 0.5,
    //     75: 0.75,
    //     100: 1,
    //   ),
    // ),
    // 'subtle-background-color': (
    //   property: background-color,
    //   class: bg,
    //   values: $utilities-bg-subtle,
    // ),
    // 'gradient': (
    //   property: background-image,
    //   class: bg,
    //   values: (
    //     gradient: var(--#{$prefix}gradient),
    //   ),
    // ),
    'user-select':
      (
        property: user-select,
        values: all auto none,
      ),
    'pointer-events': (
      property: pointer-events,
      class: pe,
      values: none auto,
    ),

    'rounded': (
      property: border-radius,
      class: rounded,
      values: (
        circle: 50%,
      ),
    ),
    // 'rounded-top': (
    //   property: border-top-left-radius border-top-right-radius,
    //   class: rounded-top,
    //   values: (
    //     null: var(--#{$prefix}border-radius),
    //     0: 0,
    //     1: var(--#{$prefix}border-radius-sm),
    //     2: var(--#{$prefix}border-radius),
    //     3: var(--#{$prefix}border-radius-lg),
    //     4: var(--#{$prefix}border-radius-xl),
    //     5: var(--#{$prefix}border-radius-xxl),
    //     circle: 50%,
    //     pill: var(--#{$prefix}border-radius-pill),
    //   ),
    // ),
    // 'rounded-end': (
    //   property: border-top-right-radius border-bottom-right-radius,
    //   class: rounded-end,
    //   values: (
    //     null: var(--#{$prefix}border-radius),
    //     0: 0,
    //     1: var(--#{$prefix}border-radius-sm),
    //     2: var(--#{$prefix}border-radius),
    //     3: var(--#{$prefix}border-radius-lg),
    //     4: var(--#{$prefix}border-radius-xl),
    //     5: var(--#{$prefix}border-radius-xxl),
    //     circle: 50%,
    //     pill: var(--#{$prefix}border-radius-pill),
    //   ),
    // ),
    // 'rounded-bottom': (
    //   property: border-bottom-right-radius border-bottom-left-radius,
    //   class: rounded-bottom,
    //   values: (
    //     null: var(--#{$prefix}border-radius),
    //     0: 0,
    //     1: var(--#{$prefix}border-radius-sm),
    //     2: var(--#{$prefix}border-radius),
    //     3: var(--#{$prefix}border-radius-lg),
    //     4: var(--#{$prefix}border-radius-xl),
    //     5: var(--#{$prefix}border-radius-xxl),
    //     circle: 50%,
    //     pill: var(--#{$prefix}border-radius-pill),
    //   ),
    // ),
    // 'rounded-start': (
    //   property: border-bottom-left-radius border-top-left-radius,
    //   class: rounded-start,
    //   values: (
    //     null: var(--#{$prefix}border-radius),
    //     0: 0,
    //     1: var(--#{$prefix}border-radius-sm),
    //     2: var(--#{$prefix}border-radius),
    //     3: var(--#{$prefix}border-radius-lg),
    //     4: var(--#{$prefix}border-radius-xl),
    //     5: var(--#{$prefix}border-radius-xxl),
    //     circle: 50%,
    //     pill: var(--#{$prefix}border-radius-pill),
    //   ),
    // ),
    'visibility':
      (
        property: visibility,
        class: null,
        values: (
          visible: visible,
          invisible: hidden,
        ),
      ),
  ),
  $utilities
);

$complex-utilities: ();
$complex-utilities: map.merge(
  (
    'font-family': (
      property: font-family,
      class: font-family,
      values: map.get($font-families, values),
      custom-property-name: map.get($font-families, custom-property-name),
    ),
    'list-none-deep': (
      class: list-none-deep,
      complex-selectors: (
        list-style: none,
        a: (
          text-decoration: none,
        ),
      ),
    ),
    'rever-spacing': (
      class: revert-spacing,
      complex-selectors: (
        padding: revert,
        margin: revert,
        '*': (
          padding: revert,
          margin: revert,
        ),
      ),
    ),
    'border': (
      property: border,
      class: border,
      values: map.get($borders, values),
      custom-property-name: map.get($borders, custom-property-name),
    ),
    'border-top': (
      property: border-top,
      class: border-top,
      values: map.get($borders, values),
      custom-property-name: map.get($borders, custom-property-name),
    ),
    'border-bottom': (
      property: border-bottom,
      class: border-bottom,
      values: map.get($borders, values),
      custom-property-name: map.get($borders, custom-property-name),
    ),
    'border-left': (
      property: border-left,
      class: border-left,
      values: map.get($borders, values),
      custom-property-name: map.get($borders, custom-property-name),
    ),
    'border-right': (
      property: border-right,
      class: border-right,
      values: map.get($borders, values),
      custom-property-name: map.get($borders, custom-property-name),
    ),
    'box-shadow': (
      property: box-shadow,
      class: box-shadow,
      values: map.get($box-shadows, values),
      custom-property-name: map.get($box-shadows, custom-property-name),
    ),
    'margin-top-fluid': (
      property: margin-top,
      class: mt + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'margin-bottom-fluid': (
      property: margin-bottom,
      class: mb + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'margin-left-fluid': (
      property: margin-left,
      class: ms + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'margin-right-fluid': (
      property: margin-right,
      class: me + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'margin-block-fluid': (
      property: margin-block,
      class: my + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'padding-top-fluid': (
      property: padding-top,
      class: pt + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'padding-bottom-fluid': (
      property: padding-bottom,
      class: pb + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'padding-left-fluid': (
      property: padding-left,
      class: ps + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'padding-right-fluid': (
      property: padding-right,
      class: pe + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'padding-block-fluid': (
      property: padding-block,
      class: py + '-' + $spacing-prefix,
      values: $spacing-clamp,
      custom-property-name: $spacing-prefix,
    ),
    'font-size-fluid': (
      property: font-size,
      class: $size-prefix,
      values: $size-clamp,
      custom-property-name: $size-prefix,
    ),
    'focus-ring': (
      class: focus-ring,
      state: ':focus',
      required-property: (
        outline: 0,
      ),
      property: box-shadow,
      values: map.get($focus-rings, values),
      custom-property-name: map.get($focus-rings, custom-property-name),
    ),
    'transition': (
      property: transition,
      class: transition,
      values: map.get($transitions, values),
      custom-property-name: map.get($transitions, custom-property-name),
    ),
    'z-index': (
      property: z-index,
      class: z,
      values: map.get($z-indexes, values),
      custom-property-name: map.get($z-indexes, custom-property-name),
    ),
    'border-radius': (
      property: border-radius,
      class: radius,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-radius-start': (
      property: border-bottom-left-radius border-top-left-radius,
      class: radius-start,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-radius-end': (
      property: border-bottom-left-radius border-top-right-radius,
      class: radius-end,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-radius-top': (
      property: border-top-left-radius border-top-right-radius,
      class: radius-top,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-radius-bottom': (
      property: border-bottom-left-radius border-bottom-right-radius,
      class: radius-bottom,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-top-left': (
      property: border-top-left-radius,
      class: radius-top-left,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-top-right': (
      property: border-top-right-radius,
      class: radius-top-right,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-bottom-left': (
      property: border-bottom-left-radius,
      class: radius-bottom-left,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'border-bottom-right': (
      property: border-bottom-right-radius,
      class: radius-bottom-right,
      values: map.get($border-radius, values),
      custom-property-name: map.get($border-radius, custom-property-name),
    ),
    'simple-and-resposive-custom-properties': (
      values: map.merge($simple-custom-properties, map.get($responsive-custom-properties, xs)),
    ),

    'flex-center': (
      class: flex-center,
      property: (
        display: flex,
        justify-content: center,
        align-items: center,
      ),
      responsive: true,
    ),
    'default-button-style': (
      class: button-style-reset,
      property: (
        background-color: transparent,
        cursor: pointer,
        border: none,
      ),
    ),
    'clear-float': (
      class: clear-float,
      state: '::after',
      property: (
        content: '',
        display: block,
        clear: both,
      ),
    ),
    'sr-only-focusable': (
      class: sr-only-focusable,
      state: ':active' ':focus',
      property: (
        clip: auto,
        -webkit-clip-path: none,
        clip-path: none,
        height: auto,
        margin: auto,
        overflow: visible,
        width: auto,
        white-space: normal,
      ),
    ),
    'sr-only': (
      class: sr-only,
      property: (
        border: 0,
        clip: rect(1px, 1px, 1px, 1px),
        -webkit-clip-path: inset(50%),
        clip-path: inset(50%),
        height: 1px,
        margin: -1px,
        overflow: hidden,
        padding: 0,
        position: absolute,
        width: 1px,
        white-space: nowrap,
      ),
    ),
    'sticky-top': (
      class: sticky-top,
      property: (
        position: sticky,
        top: 0,
        z-index: var(--z-1),
      ),
      // responsive: true,
    ),
    'sticky-bottom': (
      class: sticky-bottom,
      property: (
        position: sticky,
        bottom: 0,
        z-index: var(--z-1),
      ),
      // responsive: true,
    ),
    'fixed-top': (
      class: fixed-top,
      property: (
        position: fixed,
        top: 0,
        right: 0,
        left: 0,
        z-index: var(--z-1),
      ),
    ),
    'fixed-bottom': (
      class: fixed-bottom,
      property: (
        position: fixed,
        bottom: 0,
        right: 0,
        left: 0,
        z-index: var(--z-1),
      ),
    ),
    'position': (
      property: position,
      class: position,
      values: (
        absolute: absolute,
        relative: relative,
        static: static,
      ),
    ),
    'position-bot': (
      property: bottom,
      class: bot,
      values: $percentage-values,
    ),
    'position-top': (
      property: top,
      class: top,
      values: $percentage-values,
    ),
    'position-start': (
      property: left,
      class: left,
      values: $percentage-values,
    ),
    'position-end': (
      property: right,
      class: end,
      values: $percentage-values,
    ),
    'background-colors-hover': (
      property: background-color,
      class: bg-hover,
      local-vars: (
        'alpha': 1,
      ),
      state: ':hover',
      values:
        if(
          map.has-key($color-theme, $selected-theme, hover),
          map-loop(map.get($color-theme, $selected-theme, hover), rgba-css-var-advanced, '$key', null, $hover-prefix),
          null
        ),
    ),
    // 'background-colors': (
    //   property: background-color,
    //   class: bg,
    //   local-vars: (
    //     'alpha': 1,
    //   ),
    //   values: map-loop($selected-theme-rgb-colors, rgba-css-var-advanced, '$key', null, $color-prefix),
    //   // responsive: true,,
    // ),
    // 'background-transparent': (
    //   property: background-color,
    //   class: bg,
    //   values: transparent,
    // ),
    // 'text-color-hover': (
    //   property: color,
    //   class: text-hover,
    //   state: ':hover',
    //   values: $selected-theme-hex-colors,
    // ),
    // 'text-color': (
    //   property: color,
    //   class: text,
    //   values:
    //     map.merge(
    //       $selected-theme-hex-colors,
    //       (
    //         'transparent': transparent,
    //       )
    //     ),
    //   responsive: true,
    // ),
    // 'text-color-alpha': (
    //   property: color,
    //   class: texta,
    //   local-vars: (
    //     'alpha': 1,
    //   ),
    //   state: ':hover',
    //   values:
    //     if(
    //       map.has-key($color-theme, $selected-theme, hover),
    //       map-loop(map.get($color-theme, $selected-theme, hover), rgba-css-var-advanced, '$key', null, $hover-prefix),
    //       null
    //     ),
    // ),,
  ),
  $complex-utilities
);
