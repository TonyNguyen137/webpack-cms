/* 
This file contains some SCSS functions sourced from the Bootstrap framework.
Source: https://github.com/twbs/bootstrap/blob/main/scss/_functions.scss
These functions are used in accordance with Bootstrap's open-source license (MIT).
Modifications may have been made to the original functions.
*/
@use 'sass:math';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use 'sass:list';

$prefix: '';

@function px-to-rem($value, $precision: 3) {
  $base-font-size: 16;
  $_value: if(math.is-unitless($value), $value, strip-unit($value));
  @return round-to(math.div($_value, $base-font-size), $precision) * 1rem;
}

@function strip-unit($value) {
  @return math.div($value, $value * 0 + 1);
}

@function px-to-em($value, $precision: 3) {
  $base-font-size: 16;
  $_value: if(math.is-unitless($value), $value, strip-unit($value));
  @return round-to(math.div($_value, $base-font-size), $precision) * 1em;
}

@function round-to($number, $precision: 4) {
  $factor: math.pow(10, $precision);
  @return math.div(math.round($number * $factor), $factor);
}
@function apply-unit($value, $unit) {
  @return #{$value}#{$unit}; // Ensures no space
}

@function fluid(
  $min-size,
  $max-size,
  $min-viewport,
  $max-viewport,
  $threshold-unit: 'rem',
  $preffered-unit: 'rem',
  $relative-to: 'viewport'
) {
  $relative-to: $relative-to;
  $threshold-unit: $threshold-unit;
  $preferred-unit: $preffered-unit;

  $min-size: $min-size;
  $max-size: $max-size;

  $min-viewport: remove-unit-and-convert($min-viewport);
  $max-viewport: remove-unit-and-convert($max-viewport);

  $delta-size: $max-size - $min-size;
  $delta-viewport: $max-viewport - $min-viewport;
  $change: round-to(math.div($delta-size, $delta-viewport), 6);

  $preferred: if(
    $preferred-unit == 'rem',
    round-to(math.div($max-size - ($max-viewport * $change), 16) * 1rem, 4),
    round-to($max-size - ($max-viewport * $change), 4) * 1px
  );

  $rate-of-change: null;

  @if $relative-to == 'viewport' {
    $rate-of-change: round-to(100vw * $change);
  } @else if $relative-to == 'container' {
    $rate-of-change: round-to(100cqi * $change);
  } @else {
    @error 'Invalid value for $relative-to. Expected "viewport" or "container".';
  }

  $min-size: if($threshold-unit == 'rem', px-to-rem($min-size), $min-size * 1px);
  $max-size: if($threshold-unit == 'rem', px-to-rem($max-size), $max-size * 1px);

  @return clamp(#{$min-size}, calc(#{$preferred} + #{$rate-of-change}), #{$max-size});
}

@function fluid-rem($min-size, $max-size, $min-viewport, $max-viewport, $relativ-to: 'viewport') {
  @return fluid($min-size, $max-size, $min-viewport, $max-viewport, 'rem', 'rem', $relativ-to);
}

@function fluid-px($min-size, $max-size, $min-viewport, $max-viewport, $relative-to: 'viewport') {
  @return fluid($min-size, $max-size, $min-viewport, $max-viewport, 'px', 'px' $relative-to);
}
// Removes 'em, rem', multiply with 16 and returns the unitless value
@function remove-unit-and-convert($value) {
  $unit: math.unit($value);

  // @debug unit $unit;

  @if $unit == rem {
    $unitless-number: calc($value / 1rem);
    @return multiplyBy(16, $unitless-number);
  }

  @if $unit == em {
    $unitless-number: calc($value / 1em);

    @return multiplyBy(16, $unitless-number);
  }

  @if $unit == px {
    $unitless-number: calc($value / 1px);

    @return $unitless-number;
  }

  @return $value;
}

@function multiplyBy($factor: 16, $value) {
  @return $factor * $value;
}
// @function clr($color, $shade) {
//   @if map.has-key($colors, $color, $shade) {
//     @return map.get($colors, $color, $shade);
//   } @else {
//     @error '$colors does not have that color!';
//   }
// }
// @function fs($font-size) {
//   @if map.has-key($font-sizes, $font-size) {
//     @return map.get($font-sizes, $font-size);
//   } @else {
//     @error '$font-sizes does not have that size!';
//   }
// }

// @function size($size) {
//   @if map.has-key($spacers, $size) {
//     @return map.get($spacers, $size);
//   } @else {
//     @error '$spacers does not have that size!';
//   }
// }

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map.get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// @function map-loop-advanced($map, $func, $args...) {
//   $_map: ();

//   // @debug type-of args meta.type-of($args);
//   // @debug args__ $args;
//   // @debug map $map;
//   @each $key, $value in $map {
//     // allow to pass the $key and $value of the map as an function argument
//     // @debug a key $key value $value;
//     $_args: ();
//     @each $arg in $args {
//       // @debug arg $arg;
//       $_args: list.append(
//         $_args,
//         if($arg == '$key', $key, if($arg == '$value', $value, $arg))
//       );
//       // @debug append arg $_args;
//     }

//     // @debug after each loop _args $_args;

//     $_map: map.merge(
//       $_map,
//       (
//         $key: meta.call(meta.get-function($func), $_args...),
//       )
//     );
//     // @debug _map $_map;
//   }
//   // @debug return _map $_map;
//   @return $_map;
// }
@function map-loop($map, $func, $args...) {
  $_map: ();

  // @debug args $args;

  @each $key, $value in $map {
    // allow to pass the $key and $value of the map as an function argument
    $_args: ();
    @each $arg in $args {
      $_args: list.append($_args, if($arg == '$key', $key, if($arg == '$value', $value, $arg)));

      // @debug _args $_args;
    }

    $_map: map.merge(
      $_map,
      (
        $key: meta.call(meta.get-function($func), $_args...),
      )
    );
  }

  // @debug _map $_map;

  @return $_map;
}

@function normalize-value($value) {
  @return if($value == '', '""', $value);
}

@function to-rgb($value) {
  // @debug value $value;
  $_value: if($value == null, #000, $value);
  @return color.channel($_value, 'red'), color.channel($_value, 'green'), color.channel($_value, 'blue');
}

@function hover-color($identifier, $target, $color-prefix, $prefix: '') {
  // @debug identifier $identifier;
  // @debug target $target;
  // @debug color-prefix $color-prefix;
  // @debug prefix $prefix;

  @return var(--#{$prefix}#{$color-prefix}#{$identifier});
}

// @function rgba-css-var($identifier, $target, $color-prefix, $prefix: '') {
//   @if $identifier == 'body' and $target == 'bg' {
//     @return rgba(
//       var(--#{$prefix}#{$color-prefix}#{$identifier}-bg-rgb),
//       var(--#{$target})
//     );
//   }
//   @if $identifier == 'body' and $target == 'text' {
//     @return rgba(
//       var(--#{$prefix}#{$color-prefix}#{$identifier}-color-rgb),
//       var(--#{$target})
//     );
//   } @else {
//     @return rgba(
//       var(--#{$prefix}#{$color-prefix}#{$identifier}-rgb),
//       var(--#{$target}, 1)
//     );
//   }
// }

// stylelint-disable scss/dollar-variable-pattern
@function rgba-css-var($identifier, $target) {
  @if $identifier == 'body' and $target == 'bg' {
    @return rgba(var(--#{$prefix}#{$identifier}-bg-rgb), var(--#{$prefix}#{$target}-opacity));
  }
  @if $identifier == 'body' and $target == 'text' {
    @return rgba(var(--#{$prefix}#{$identifier}-color-rgb), var(--#{$prefix}#{$target}-opacity));
  } @else {
    @return rgba(var(--#{$prefix}#{$identifier}-rgb), var(--#{$prefix}#{$target}-opacity));
  }
}

@function rgba-css-var-advanced($identifier, $target, $local-prefix: '') {
  @if $identifier == 'body' and $target == 'bg' {
    @return rgba(var(--#{$prefix}#{$identifier}-bg-rgb), var(--#{$prefix}alpha));
  }
  @if $identifier == 'body' and $target == 'text' {
    @return rgba(var(--#{$prefix}#{$identifier}-color-rgb), var(--#{$prefix}alpha));
  } @else {
    @return rgba(var(--#{$prefix}#{$local-prefix}#{$identifier}-rgb), var(--#{$prefix}alpha));
  }
}

@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map.merge($result, ('n' + $key: (-$value)));
    }
  }
  @return $result;
}

@function deep-loop($map, $prefix: '') {
  $flat-map: (); // Initialize an empty map to store the results

  @each $key, $value in $map {
    // Generate a new key by concatenating the prefix and the current key
    $new-key: if($prefix != '', '#{$prefix}-#{$key}', $key);

    @if meta.type-of($value) == 'map' {
      // Recursively call the function if the value is a map
      $flat-map: map.merge($flat-map, deep-loop($value, $new-key));
    } @else {
      // Otherwise, add the key-value pair to the flat map
      $flat-map: map.merge(
        $flat-map,
        (
          $new-key: $value,
        )
      );
    }
  }

  @return $flat-map; // Return the flattened map
}
